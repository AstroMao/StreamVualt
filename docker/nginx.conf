server {
    listen ${NGINX_PORT};
    server_name localhost;  # Change this to your actual domain or IP

    # Root directory for static files
    root /app/public;  # Update this path to your actual public directory

    # Serve the main application
    location / {
        try_files $uri $uri/ @node;
    }

    # Proxy requests to Node.js server
    location @node {
        proxy_pass http://app:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Serve media files directly
    location /media/ {
        alias /app/media/;  # Update this path to your actual media directory
        
        # Set CORS headers for all responses
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, OPTIONS";
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Range";

        # Handle OPTIONS requests for CORS preflight
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Range";
            add_header Content-Type 'text/plain; charset=utf-8';
            add_header Content-Length 0;
            return 204;
        }

        # Set content types based on file extension
        location ~ \.m3u8$ {
            add_header Access-Control-Allow-Origin "*";
            add_header Content-Type application/vnd.apple.mpegurl;
        }

        location ~ \.ts$ {
            add_header Access-Control-Allow-Origin "*";
            add_header Content-Type video/mp2t;
        }

        try_files $uri $uri/ =404;
    }

    # Increase max body size for video uploads
    client_max_body_size 500M;
}
